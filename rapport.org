#+TITLE: Rapport projet LRC 
#+DATE:18/12/2023
#+AUTHOR: NOM DE FAMILLE ? Lyes
#+AUTHOR: JAVAID Mohammad-Habib

* Les fichiers 
Le fichier tabox.pl contient notre abox, et notre tbox.
Le fichier tabox_auto_referante.pl contient une tbox auto-référente, utile pour réaliser un test de la fonction "non_autoref".
Le fichier partie_1.pl contient toute la partie 1 du projet.

* Partie 1
Dans cette partie, nous allons développer le fichier ~partie_1.pl~.
** Récupérer la tbox et la abox 
** ~non_autoref~

Pour utiliser ~non_autoref~, il suffit de lui donner le nom de notre concept non atomique, et il retrouvera automatiquement son expression pour réaliser des appels récursifs dessus et ainsi vérifier si le concept non atomique possède des auto-référence :
#+BEGIN_SRC prolog
non_autoref(Nom_de_concept, Expr):- non_autoref(Nom_de_concept, Expr, [Nom_de_concept]), !.
non_autoref(Concept_non_atomique) :- cnamena(Concept_non_atomique), recup_exp_tbox(Concept_non_atomique, Son_exp) , non_autoref(Concept_tbox, Son_exp).
#+END_SRC

Pour réaliser  ~non_autoref~, nous avons réaliser comme un parcours d'arbre de notre expression, en effectuant un appel récursif sur chaque concept/expression de nos expression de notre grammaire :

#+BEGIN_SRC prolog
non_autoref(Nom_de_concept, and(Exp1, Exp2), Liste_dejas_vus):-  non_autoref(Nom_de_concept, Exp1, Liste_dejas_vus) , non_autoref(Nom_de_concept, Exp2, Liste_dejas_vus), write(and(Exp1, Exp2)), write(', and  \n').

non_autoref(Nom_de_concept, or(Exp1, Exp2), Liste_dejas_vus):- non_autoref(Nom_de_concept, Exp1, Liste_dejas_vus) , non_autoref(Nom_de_concept, Exp2, Liste_dejas_vus), write(or(Exp1, Exp2)), write(', or \n').

non_autoref(Nom_de_concept, not(Exp), Liste_dejas_vus):-   non_autoref(Nom_de_concept, Exp, Liste_dejas_vus), write(non(Exp)), write(', non \n').

non_autoref(Nom_de_concept, some(_, Exp), Liste_dejas_vus):-  non_autoref(Nom_de_concept, Exp, Liste_dejas_vus), write(Exp), write(', some \n').
non_autoref(Nom_de_concept, all(_, Exp), Liste_dejas_vus):-  non_autoref(Nom_de_concept, Exp, Liste_dejas_vus), write(Exp), write(', all \n').

#+END_SRC

L'objectif étant d'atteindre les concepts atomiques et non atomique.
S'il y a un concept atomique, cela ne nous intéresse pas, ce n'est pas ça qui va faire qu'un concept est auto-référent.

Néanmoins, lorsqu'on tombe sur un concept non atomique, alors on vérifie si sont expression ne contient pas un concept non atomique que l'on aurait déjà vu au préalable, ce qui signifierait qu'il est auto-référent.

#+BEGIN_SRC prolog
non_autoref(_, Concept_atomique, _) :- cnamea(Concept_atomique), write(Concept_atomique),  write(', concept atomique\n').
non_autoref(_, Concept_non_atomique , Liste_dejas_vus) :-  cnamena(Concept_non_atomique),
    member(Concept_non_atomique, Liste_dejas_vus),
    recup_exp_tbox(Concept_non_atomique, Son_exp),
    non_autoref(Concept_non_atomique, Son_exp, [Concept_non_atomique|Liste_dejas_vus]), write(Concept_non_atomique), write(', concept non atomique\n').
#+END_SRC

** Concept
Concept correspond à notre analyse syntaxique.

Pour réaliser concept, on parcoure l'expression du concept comme un arbre, et pour chaque forme que pouvait prendre un concept/expression, vérifier, si les expressions contiennent bien ce qu'ils sont censé contenir (à l'aide de la grammaire).

Typiquement, pour all, on a vérifier si cela contient bien un nom de relation, ainsi qu'un concept.
#+BEGIN_SRC prolog
concept(Atomique):- cnamea(Atomique). % contient aussi anything et nothing
concept(Non_atomique):- cnamena(Non_atomique).
concept(and(Exp1, Exp2)) :- concept(Exp1), concept(Exp2).
concept(or(Exp1, Exp2)) :- concept(Exp1), concept(Exp1).
concept(not(Exp)) :- concept(Exp).
concept(some(R, C)) :- rname(R) , concept(C).
concept(all(R, C)) :- rname(R) , concept(C).
#+END_SRC

** Suppression des concept non atomique
À expliquer : 
#+BEGIN_SRC prolog
suppr_concept_nat(Atomique, Atomique):- cnamea(Atomique). % contient aussi anything et nothing
suppr_concept_nat(Non_atomique, Son_exp_sans_nat):- recup_exp_tbox(Non_atomique, Son_exp), suppr_concept_nat(Son_exp, Son_exp_sans_nat).
suppr_concept_nat(and(Exp1, Exp2), and(Exp3, Exp4)) :- suppr_concept_nat(Exp1, Exp3), suppr_concept_nat(Exp2, Exp4).
suppr_concept_nat(or(Exp1, Exp2), or(Exp3, Exp4)) :- suppr_concept_nat(Exp1, Exp3), suppr_concept_nat(Exp2, Exp4).
suppr_concept_nat(not(Exp), not(Exp2)) :- suppr_concept_nat(Exp, Exp2).
suppr_concept_nat(some(R, C), some(R, C2)) :- suppr_concept_nat(C, C2).
suppr_concept_nat(all(R, C), all(R, C2)) :- suppr_concept_nat(C, C2).
#+END_SRC
** Traitement de la tbox
Nous avons maintenant tout ce qu'il faut pour réaliser notre traitement de la tbox.

Le prédicat ~traitement_Tbox~ possède deux arguments, le premier argument est notre tbox sous forme de liste, et le deuxième argument est le résultat du traitement.
Le traitement de la tbox se passe en plusieurs étapes :
1. on commence par vérifier que dans la tête de la liste, le nom du concept non atomique est bien nom de concept non atomique
2. ensuite, on vérifie que le concept ne s'auto référence pas, on le réalise avant l'analyse syntaxique pour éviter les boucles infinis
3. on réalise l'analyse syntaxique avec le prédicat concept, qui s'applique à l'expression du concept non atomique
  - les étapes précédentes correspondent à l'analyse syntaxique et sémantique
4. on supprime les concepts non atomique de l'expression
5. on récupère la forme normale négative de l'expression
6. on continue avec la suite de notre tbox sous forme de liste
   
On a ainsi réaliser toutes les vérifications (syntaxique et sémantiques), et récupérer une expression avec uniquement des concepts atomique et sous forme normale négative.

#+BEGIN_SRC prolog
traitement_Tbox([(Concept_non_atomique, Exp)|T], [(Concept_non_atomique, NewExpNNF)|NewT]):-
    cnamena(Concept_non_atomique), % 1.
    non_autoref(Concept_non_atomique), % 2.
    concept(Exp), % 3.
    suppr_concept_nat(Exp, NewExp), % 4.
    nnf(NewExp, NewExpNNF), % 5.
    traitement_Tbox(T, NewT), !. % 6.
#+END_SRC

** Traitement de la Abox

Pour le traitement de la Abox, de la même manière, il prend deux arguments, notre liste d'assertion de concepts de notre abox, ainsi que la liste d'assertion de concept de notre abox mais avec uniquement des concepts atomique, sans les concepts non atomique.

On va alors réalisé deux type de traitement :
- dans le cas où notre instance est défini seulement par un concept atomique, on vérifie simplement que notre instance en est bien une et que notre concept atomique en est bien un, puis on réalise le traitement de la suite de notre liste
- dans le cas où notre instance est défini par un concept non atomique, on vérifie que notre instance en est bien une et que notre concept non atomique en est bien, et on récupère alors son expression dans la tbox simplifiée (grâce à ~traitement_Tbox~)


#+BEGIN_SRC prolog
traitement_Abox([(Instance, ConceptNonAtomique)|T], [(Instance, SonExpSimplifie)|NouveauT]) :-
    iname(Instance), cnamena(ConceptNonAtomique),
    recup_exp_tbox_simplifie(ConceptNonAtomique, SonExpSimplifie), 
    traitement_Abox(T, NouveauT).
traitement_Abox([(Instance, ConceptAtomique)|T], [(Instance, ConceptAtomique)|NouveauT]) :-
    iname(Instance), cnamea(ConceptAtomique),
    traitement_Abox(T, NouveauT).
#+END_SRC


* Partie 2 :
** Programme 
on peut écrire le prédicat qui démarre le programme global du démonstrateur

#+BEGIN_SRC prolog
programe :- premiere_etape(Tbox,Abi,Abr),
            deuxieme_etape(Abi,Abi1,Tbox),
            troisieme_etape(Abi,Abi1).
#END_SRC

** Prédicat Première Etape :
Ce prédicat prend en arguments la Tbox, les assertions de concepts de l'Abox et les assertions de rôles de l'Abox.
Dans ce prédicat, on utilise le prédicat setof qui permet de les liste traitées dans les Tbox et Abox
#+BEGIN_SRC prolog
premiere_etape(Tbox, Abi, Abr) :-    
    setof((X,Y),equiv(X,Y),Tbox),
    setof((X,Y),inst(X,Y),Abi),
    setof((X,Y,Z),instR(X,Y,Z),Abr).
#END_SRC

***Test :
#+BEGIN_SRC prolog
?- premiere_etape(Tbox,Abi,Abr).
Tbox = [(auteur, and(personne, some(aEcrit, livre))), (editeur, and(personne, and(not(some(aEcrit, livre)), some(aEdite, livre)))), (parent, and(personne, some(aEnfant, anything))), (sculpteur, and(personne, some(aCree, sculpture)))],
Abi = [(david, sculpture), (joconde, objet), (michelAnge, personne), (sonnets, livre), (vinci, personne)],
Abr = [(michelAnge, david, aCree), (michelAnge, sonnets, aEcrit), (vinci, joconde, aCree)].
#END_SRC

**Prédicat Deuxième Etape : 
Ce predicat prend en arguments la liste des assertions de concepts initiales ,la liste des assertions de concepts complétée après la soumission d'une proposition a demontrer et la liste représentant la TBox
et utilise le predicat saisie_et_traitement_prop_a_demontrer.
Ce dernier, utilise deux predicats: acquisition_prop_type1 et acquisition_prop_type2

**predicat acquisition_prop_type1 :
Ce prédicat permet de réaliser l’acquisition d’une proposition de type 1, à savoir
de la forme I:C. On ajoutera la négation de ce concept à la ABox puis l’on cherchera
à montrer que ce concept est insatisfiable.
L’utilisateur du solveur doit saisir l’instance puis le concept. La négation du
concept est alors mise sous forme d’une expression de concepts atomiques puis sous
forme nnf. Elle est ensuite ajoutée à la ABox

#+BEGIN_SRC prolog
acquisition_prop_type1(Abi,Abi1,Tbox):- nl,write("Entrez linstance I : "),
                                    nl,read(I),
                                    nl,write("Entrez le concept C : "),
                                    nl,read(C),
                                    /*Il faut check si c'est un concept et une instanciation*/
                                    /* si c'est pas atomique on doit replacer par la version atomique */
                                    iname(I),
                                    concept(C),
                                    suppr_concept_nat(C,Cnew), 
                                    nnf((not(Cnew)),Result),
                                    Abi1 = [(I,Result) | Abi1].
#END_SRC
***Test:
#+BEGIN_SRC prolog 
?- acquisition_prop_type1([(david, sculpture),
|    (joconde, objet), (michelAnge, personne), (sonnets,
|    livre), (vinci, personne)], Abi1, [(auteur,
|    and(personne, some(aEcrit, livre))), (editeur,
|    and(personne, and(all(aEcrit, not(livre)), some(aEdite,
|    livre)))), (parent, and(personne, some(aEnfant,
|    anything))), (sculpteur, and(personne, some(aCree,
|    sculpture)))]).

Entrez linstance I : 
|: michelAnge.

Entrez le concept C : 
|: personne.

Abi1 = [(michelAnge, not(personne))|Abi1] .
#END_SRC


**predicat acquisition_prop_type2 : 
Ce prédicat permet de réaliser l’acquisition d’une proposition de type 2, à savoir
de la forme C1 ⊓ C2. On ajoutera la négation de ce concept à la ABox puis l’on
cherchera à montrer que ce concept est insatisfiable.
L’utilisateur du solveur doit saisir le premier puis le second concept. L’intersec-
tion de ces deux concepts est alors mise sous forme d’une expression de concepts
atomiques puis sous forme nnf. La négation de ce concept est ensuite ajoutée à la
ABox. Cela signifie donc que l’on génère une instance de la négation de ce concept.

#+BEGIN_SRC prolog
acquisition_prop_type2(Abi,[(inst,Result)|Abi],_) :- recup_abox(Abi),
                                       nl,write("Entrez le concept C1 : "),
                                        nl,read(C1),
                                        nl,write("Entrez le concept C2 : "),
                                        nl,read(C2),
                                        /*Il faut check si c'est un concept et une instanciation)*/
                                        /* si c'est pas atomique on doit replacer par la version atomique*/
                                        concept(and(C1,C2)),                                        
                                        suppr_concept_nat(C1,C1new),
                                        suppr_concept_nat(C2,C2new),
                                        nnf(and(C1new, C2new),Result),
                                        genere(inst).
#END_SRC

*Partie 3 : 
**predicat tri_Abox :
Ce prédicat permet de trier la Abox en generant 5 listes : 
une liste pour les assertions de type (I,some(R,C))
une liste pour les assertions de type (I,all(R,C))
une liste pour les assertions de type (I,and(R,C))
une liste pour les assertions de type (I,or(R,C))
une liste pour les assertions restantes.

#+BEGIN_SRC prolog
tri_Abox([],[],[],[],[],[]).
tri_Abox([(I, some(R,C)) | L], [(I, some(R,C)) | Lie], Lpt, Li, Lu, Ls) :- tri_Abox(L, Lie, Lpt, Li, Lu, Ls).
tri_Abox([(I, all(R,C)) | L], Lie, [(I, all(R,C)) | Lpt], Li, Lu, Ls) :- tri_Abox(L, Lie, Lpt, Li, Lu, Ls).
tri_Abox([(I, and(C1,C2)) | L], Lie, Lpt, [(I, and(C1,C2)) | Li], Lu, Ls) :- tri_Abox(L, Lie, Lpt, Li, Lu, Ls).
tri_Abox([(I, or(C1,C2)) | L], Lie, Lpt, Li, [(I, or(C1,C2)) | Lu], Ls) :- tri_Abox(L, Lie, Lpt, Li, Lu, Ls).
tri_Abox([(I,C)|L], Lie, Lpt, Li, Lu, [(I,C)|Ls]) :- cnamea(C), tri_Abox(L, Lie, Lpt, Li, Lu, Ls).
tri_Abox([(I,not(C))|L], Lie, Lpt, Li, Lu, [(I,not(C))|Ls]) :- cnamea(C), tri_Abox(L, Lie, Lpt, Li, Lu, Ls).    
#END_SRC

**prédicat resolution 
resolution prend en  arguments les 5 listes de  tri_abox et puis utilise ces prédicats :
-complete_some(Lie,Lpt,Li,Lu,Ls,Abr)
-transformation_and(Lie,Lpt,Li,Lu,Ls,Abr)
-deduction_all(Lie,Lpt,Li,Lu,Ls,Abr)
-transformation_or(Lie,Lpt,Li,Lu,Ls,Abr)
- test_clash(Ls)

#+BEGIN_SRC
resolution(Lie,Lpt,Li,Lu,Ls,Abr) :- test_clash(Ls) ,complete_some(Lie,Lpt,Li,Lu,Ls,Abr),
                                    test_clash(Ls) , transformation_and(Lie,Lpt,Li,Lu,Ls,Abr),
                                    test_clash(Ls) ,deduction_all(Lie,Lpt,Li,Lu,Ls,Abr),
                                    test_clash(Ls) ,transformation_or(Lie,Lpt,Li,Lu,Ls,Abr).
resolution([],[],[],[],Ls,Abr) :- not(test_clash(Ls)).
#END_SRC

**predicat test_clash :
 predicat qui check si on a un clash  dans notre Abox (ça rencoie false si y a un clash)
 #+BEGIN_SRC
 test_clash([]).
test_clash([(I,C)|T]) :- nnf(not(C),Cnnf), not(member((I,Cnnf),T)), test_clash(T).
#END_SRC
***Test:
#+BEGIN_SRC
?- test_clash([(joconde, objet),(joconde,not(objet))]).
false.
#END_SRC

**affichage
predicat qui sera utiliser pour afficher l'evolution de l'Abox.On l'utilise pour afficher les différentes assertions
en utilisant les symboles mathématiques ∃, ⊔, ¬, ∀, ⊓, et une notation infixée.
#+BEGIN_SRC 
affichage([]).
affichage([A|T]):- affichage(A),affichage(T).
affichage(C) :- write(C).
affichage((I,C)) :- nl,write(I), write(' : '), affichage(C).
affichage(not(C)) :- write('¬'),affichage(C).
affichage((I,or(C1,C2))) :- nl,write(I),write(' : '), affichage(C1),write(' ⊔ '),affichage(C2).
affichage((I,and(C1,C2))) :- nl,write(I),write(' : '), affichage(C1),write(' ⊓ '),affichage(C2).
affichage(all(R,C)) :- write('∀'),write(R),write('.'),affichage(C).
affichage(some(R,C)) :- write('∃'), write(R), write('.'), affichage(C).
#END_SRC

**affichage_Abr:
predicat qui affiche la Abox des roles
#BEGIN_SRC
affichage_Abr([]).
affichage_Abr([(A , B , R)| T]) :-  write("<"), write(A), write(","), write(B), write("> : "), write(R), nl, affichage_Abr(Reste).
#END_SRC

**predicat affiche_evolution_Abox:
predicat qui affiche la Abox de base et puis affiche la Abox evoluée apres l'application des différentstraitements.
#+BEGIN_SRC
affiche_evolution_Abox(Ls, Lie, Lpt, Li, Lu, Abr, Ls1, Lie1, Lpt1, Li1, Lu1, Abr1):-
    write('Affichage Evolution Abox : Abox de Base'),
    nl,affichage(Ls),
    affichage(Lie),
    affichage(Lpt),
    affichage(Li),
    affichage(Lu),
    affichage_Abr(Abr),
    nl,write('ABox Apres'),nl,
    affichage(Ls1),
    affichage(Lie1),
    affichage(Lpt1),
    affichage(Li1),
    affichage(Lu1),
    affichage_Abr(Abr1).
#END_SRC

**predicat evolue :
Ce prédicat permet d’insérer une assertion à la bonne sous-liste de la ABox.
Il suffit de regarder la forme de l’assertion (some, all, and, or ou autre) puis d’ajouter
le prédicat à la liste correspondante.

#+BEGIN_SRC
/*Ajout d'un nouvelle assertion dans les listes  Lie, Lpt, Li, Lu ou Ls*/
evolue((I,C),Lie,Lpt,Li,Lu,Ls,Lie,Lpt,Li,Lu,Ls1):- concat([(I,C)],Ls,Ls1).
/*∃ = Lie*/
evolue((I,some(R,C)),Lie,Lpt,Li,Lu,Ls,Lie1,Lpt,Li,Lu,Ls) :- concat([(I,some(R,C))],Lie,Lie1).

/*∀ = Lpt*/
evolue((I,all(R,C)),Lie,Lpt,Li,Lu,Ls,Lie,Lpt1,Li,Lu,Ls) :- concat([(I,all(R,C))],Lpt,Lpt1). 

/*⊓ = Li*/
evolue((I,and(C1,C2)),Lie,Lpt,Li,Lu,Ls,Lie,Lpt,Li1,Lu,Ls) :- concat([(I,and(C1,C2))],Li,Li1).

/*⊔ = Lu*/
evolue((I,or(C1,C2)),Lie,Lpt,Li,Lu,Ls,Lie,Lpt,Li,Lu1,Ls) :- concat([(I,or(C1,C2))],Lu,Lu1).

/*not = Ls*/
evolue((I,not(C)),Lie,Lpt,Li,Lu,Ls,Lie,Lpt,Li,Lu,Ls1) :- concat([(I,not(C))],Ls,Ls1).
#END_SRC

**Predicat complete_some
Dans ce predit , on applique l'assertion il existe. 
On genere une instance, on ajoute l'instance, le role et le concept dans l'Abox puis On affiche ensuite l’évolution de la ABox puis on applique à nouveau le prédicat
resolution sur la nouvelle ABox (contenant la nouvelle assertion et ne contenant plus l’assertion sur laquelle on a appliqué la règle il existe)
#+BEGIN_SRC
complete_some([(I,some(R,C))|Lie],Lpt,Li,Lu,Ls,Abr) :- genere(B), /*On génère une instance B*/
                                                    concat([(I,B,R)], Abr, NewAbr), /*ajour de I, B ,R dans Abr*/
													evolue((B,C),Lie,Lpt,Li,Lu,Ls,Lie1,Lpt1,Li1,Lu1,Ls1), /*ajout l'assertion de concept*/
	 											    affiche_evolution_Abox(Ls, [(I,some(R,C))|Lie], Lpt, Li, Lu, Abr, Ls1, Lie1, Lpt1, Li1, Lu1, [(A,B,R)|Abr]),
												    !,resolution(Lie1, Lpt1, Li1, Lu1, Ls1, NewAbr). /*ajout l'assertion de rôle*/
#END_SRC

***Test
#+BEGIN_SRC
?- complete_some([michelAnge,some(aCree,sculpture)],[],[],[],[],[]).
false.
#END_SRC



**predicat transformation_and 
Dans ce predicat, on applique l'intersection.
on ajoute l'assertion(I,C1) et (I,C2) à l'Abox puis on affiche l'evolution de l'Abox puis on applique la resolution dessus
#+BEGIN_SRC
transformation_and(Lie,Lpt,[(I,and(C1,C2))|Li],Lu,Ls,Abr) :- evolue((I,C1),Lie,Lpt,Li,Lu,Ls,Lie1,Lpt1,Li1,Lu1,Ls1),
    													   evolue((I,C2),Lie1,Lpt1,Li1,Lu1,Ls1,Lie2,Lpt2,Li2,Lu2,Ls2),
														   nl, affiche_evolution_Abox(Ls, Lie, Lpt, [(I,and(C1,C2))|Li], Lu, Abr, Ls2, Lie2, Lpt2, Li2, Lu2, Abr),
														   !,resolution(Lie2,Lpt2,Li2,Lu2,Ls2,Abr). /*On ajoute à Ls les deux assertions et l'on résoud*/
#END_SRC


